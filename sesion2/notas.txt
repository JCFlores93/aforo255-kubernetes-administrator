SESION 02
========

kubectl run demoapp --image=icuadrosaforo255/dockerdemo
kubectl get pods

kubectl logs demoapp
kubectl describe pod demoapp
docker ps




POD

apiVersion: v1 
kind: Pod #tipo de recursos
metadata: #metadata del deployment
  name: demoapp2  #nombre del pod
spec: #especificacion del contenedor
  containers:
    - name: con-demoapp
      image: icuadrosaforo255/dockerdemo





apiVersion: apps/v1 #apigroup
kind: Deployment #tipo de recursos
metadata: #metadata del deployment
  name: deployment-demoapp  #nombre del deployment
  labels:
    app: demoapp
spec: #especificacion del replicaset
  replicas: 3
  selector:
    matchLabels:
      app: demoapp #labels que el replicaset va a utilizar para encontrar a los pods
  template: #datos del pod
    metadata:
      labels:
        app: demoapp
    spec: #especificacion del pod
      containers:
      - name: con-demoapp
        image: icuadrosaforo255/dockerdemo


kubectl apply -f .\deploy.yml
kubectl get po
kubectl get rs
kubectl get deploy


----



apiVersion: apps/v1 #apigroup
kind: Deployment #tipo de recursos
metadata: #metadata del deployment
  name: deployment-demoapp  #nombre del deployment
  labels:
    app: demoapp
spec: #especificacion del replicaset
  replicas: 3
  selector:
    matchLabels:
      app: demoapp #labels que el replicaset va a utilizar para encontrar a los pods
  template: #datos del pod
    metadata:
      labels:
        app: demoapp
    spec: #especificacion del pod
      containers:
      - name: con-demoapp
        image: icuadrosaforo255/dockerdemo
        ports:
          - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: service-demoapp #nombre del servicio
  labels:
    app: demoapp
spec:
  type: LoadBalancer
  selector:
    app: demoapp #Con que labels obervaremos los pods
  ports:
    - protocol: TCP
      port: 80 #el puerto en el que el servicio escucha
      targetPort: 80 #que puerto del pod voy a consumir






=====


---
apiVersion: v1
kind: Namespace
metadata:
  name: ns-dev
  labels:
    name: demoapp
---
apiVersion: apps/v1 #apigroup
kind: Deployment #tipo de recursos
metadata: #metadata del deployment
  name: deploy-demoapp  #nombre del deployment
  namespace: ns-dev
  labels:
    app: demoapp
spec: #especificacion del replicaset
  replicas: 3
  selector:
    matchLabels:
      app: demoapp #labels que el replicaset va a utilizar para encontrar a los pods
  template: #datos del pod
    metadata:
      labels:
        app: demoapp
    spec: #especificacion del pod
      containers:
      - name: con-demoapp
        image: icuadrosaforo255/dockerdemo:v2
        ports:
          - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: svc-demoapp #nombre del servicio
  namespace: ns-dev
  labels:
    app: demoapp
spec:
  selector:
    app: demoapp #Con que labels obervaremos los pods
  ports:
    - protocol: TCP
      port: 80 #el puerto en el que el servicio escucha
      targetPort: 80 #que puerto del pod voy a consumir




kubectl create ns ns-project-cms
kubectl get ns
kubectl get all -n ns-dev






=============

apiVersion: v1
kind: Pod
metadata:
  name: frontend
spec:
  containers:
  - name: app
    image: hello-world
    resources:
      requests:
        memory: "64Mi" #Garantizado
        cpu: "250m" #Garantizado
      limits:
        memory: "128Mi"
        cpu: "500m"




kubectl describe po frontend



======================


---
apiVersion: v1
kind: Namespace
metadata:
  name: ns-prod
  labels:
    name: lb-test
---
apiVersion: v1
kind: LimitRange
metadata:
  name: mem-cpu-limit-range
  namespace: ns-prod
spec:
  limits:
  - default:
      memory: 512Mi
      cpu: 1
    defaultRequest:
      memory: 256Mi
      cpu: 0.5
    type: Container


=================

apiVersion: v1 
kind: Pod 
metadata:
  name: demoapplimit
  namespace: ns-prod
spec: 
  containers:
  - name: container-demoapp
    image: icuadrosaforo255/dockerdemo 






 kubectl describe po demoapplimit -n ns-prod